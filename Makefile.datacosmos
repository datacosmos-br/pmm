###############################################################################
# Makefile COMPLETO para build, empacotamento e publicação do PMM
# sem atalhos, replicando todas as etapas, com criação do arquivo VERSION
# em $(ROOT_DIR) para uso pelos scripts.
#
# Autor: Marlon Costa <marlon.costa@datacosmos.com.br>
# Empresa: Datacosmos
# Versão: 5.1
# Data: 15/03/2025
#
# Licenciado sob a Apache License, Version 2.0
# (http://www.apache.org/licenses/LICENSE-2.0)
#
# Histórico de alterações:
#   v5.0 - Versão integral com ROOT_DIR=/tmp/pmm-build e PATH_TO_SCRIPTS=build/scripts
#   v5.1 (15/03/2025) - Inclusão do target write-version para criar $(ROOT_DIR)/VERSION
###############################################################################

SHELL := /bin/bash

# -----------------------------------------------------------------------------
# Variáveis Principais
# -----------------------------------------------------------------------------
PKG_NAME         := pmm
VERSION          ?= $(shell cat VERSION 2>/dev/null | tr -d '\n')
VERSION          ?= 3.0.0

GIT_BRANCH       ?= v3
DESTINATION      ?= experimental

# Diretório onde ficam os scripts de build
PATH_TO_SCRIPTS  ?= build/scripts

# Diretório "raiz" que os scripts usarão dentro dos containers
ROOT_DIR         ?= /tmp/pmm-build

# Distribuição e arquitetura para o empacotamento
DIST             ?= el9
ARCH             ?= noarch

# Repositório para todas as imagens Docker
IMAGE_REGISTRY   ?= gru.ocir.io/grq1iurfepyg/pmm
BASE_DOCKER_TAG  ?= rpmbuild:3

# Imagens para Release (client, server, watchtower)
CLIENT_IMAGE     := $(IMAGE_REGISTRY)/pmm-client:$(VERSION)-rc
SERVER_IMAGE     := $(IMAGE_REGISTRY)/pmm-server:$(VERSION)-rc
WATCHTOWER_IMAGE := $(IMAGE_REGISTRY)/pmm-watchtower:$(VERSION)-rc

# Tag dinâmica para a imagem do server (com timestamp)
DOCKER_SERVER_TAG := $(IMAGE_REGISTRY)/pmm-server:$(shell date -u '+%Y%m%d%H%M')

# -----------------------------------------------------------------------------
# Alvos Principais
# -----------------------------------------------------------------------------
.PHONY: all prepare submodules write-version build-rpmbuild-image client server watchtower devcontainer test-api test-e2e release

# Cria o arquivo $(ROOT_DIR)/VERSION com o formato: <version>-<release>
.PHONY: write-version
write-version:
	@echo "==> [Version] Gerando arquivo VERSION em $(ROOT_DIR)..."
	@mkdir -p $(ROOT_DIR)
	@echo "$$(git describe --tags --abbrev=0 | sed 's/^v//')-$$(git rev-list --count HEAD)" > $(ROOT_DIR)/VERSION

prepare: submodules write-version
	@echo "==> [Prepare] Versão do PMM: $(VERSION)"
	@echo "    Branch:       $(GIT_BRANCH)"
	@echo "    Imagens:      $(IMAGE_REGISTRY)"
	@echo "    DESTINATION:  $(DESTINATION)"
	@echo "    ROOT_DIR:     $(ROOT_DIR)"

submodules:
	@echo "==> [Submódulos] Atualizando submódulos (branch: $(GIT_BRANCH))..."
	git submodule update --init --jobs 10
	git submodule status

# -----------------------------------------------------------------------------
# 1) Build da imagem base rpmbuild (deve estar pronta antes dos scripts)
# -----------------------------------------------------------------------------
.PHONY: rpm-buildx rpm-build

rpm-buildx:
	@echo "==> [rpmbuild] Criando/Verificando builder Buildx..."
	docker buildx create --use --name pmmbuilder --driver docker-container || true
	docker buildx inspect pmmbuilder --bootstrap

rpm-build: rpm-buildx
	@echo "==> [rpmbuild] Build e push da imagem base (linux/amd64 e linux/arm64)..."
	cd build/docker/rpmbuild && \
	  docker buildx build --pull --platform linux/amd64,linux/arm64 \
		--tag $(IMAGE_REGISTRY)/$(BASE_DOCKER_TAG) \
		-f Dockerfile.el9 \
		--push .

build-rpmbuild-image: rpm-build
	@echo "==> [rpmbuild] Imagem base rpmbuild pronta."

# -----------------------------------------------------------------------------
# 2) Build do Client
# -----------------------------------------------------------------------------
.PHONY: client-source client-binary client-srpm client-rpm client-docker client

client-source:
	@echo "==> [Client] build-client-source"
	@[ -x "$(PATH_TO_SCRIPTS)/build-client-source" ] || \
	  (echo "ERRO: 'build-client-source' não encontrado."; exit 1)
	@ROOT_DIR=$(ROOT_DIR) $(PATH_TO_SCRIPTS)/build-client-source

client-binary: client-source
	@echo "==> [Client] build-client-binary"
	@[ -x "$(PATH_TO_SCRIPTS)/build-client-binary" ] || \
	  (echo "ERRO: 'build-client-binary' não encontrado."; exit 1)
	@ROOT_DIR=$(ROOT_DIR) $(PATH_TO_SCRIPTS)/build-client-binary

client-srpm: client-binary
	@echo "==> [Client] build-client-srpm"
	@[ -x "$(PATH_TO_SCRIPTS)/build-client-srpm" ] || \
	  (echo "ERRO: 'build-client-srpm' não encontrado."; exit 1)
	@ROOT_DIR=$(ROOT_DIR) $(PATH_TO_SCRIPTS)/build-client-srpm $(IMAGE_REGISTRY)/$(BASE_DOCKER_TAG)

client-rpm: client-srpm
	@echo "==> [Client] build-client-rpm"
	@[ -x "$(PATH_TO_SCRIPTS)/build-client-rpm" ] || \
	  (echo "ERRO: 'build-client-rpm' não encontrado."; exit 1)
	@ROOT_DIR=$(ROOT_DIR) $(PATH_TO_SCRIPTS)/build-client-rpm $(IMAGE_REGISTRY)/$(BASE_DOCKER_TAG)

client-docker: client-binary
	@echo "==> [Client] build-client-docker"
	@[ -x "$(PATH_TO_SCRIPTS)/build-client-docker" ] || \
	  (echo "ERRO: 'build-client-docker' não encontrado."; exit 1)
	@ROOT_DIR=$(ROOT_DIR) PUSH_DOCKER=1 DOCKER_CLIENT_TAG=$(CLIENT_IMAGE) \
	  $(PATH_TO_SCRIPTS)/build-client-docker

client: client-source client-binary client-srpm client-rpm client-docker
	@echo "==> [Client] Build completo do client finalizado."

# -----------------------------------------------------------------------------
# 3) Build do Server
# -----------------------------------------------------------------------------
.PHONY: server-packages server-docker server

server-packages:
	@echo "==> [Server] build-server-rpm-all"
	@[ -x "$(PATH_TO_SCRIPTS)/build-server-rpm-all" ] || \
	  (echo "ERRO: 'build-server-rpm-all' não encontrado."; exit 1)
	@ROOT_DIR=$(ROOT_DIR) RPMBUILD_DOCKER_IMAGE=$(IMAGE_REGISTRY)/$(BASE_DOCKER_TAG) \
	  RPMBUILD_DIST="$(DIST)" $(PATH_TO_SCRIPTS)/build-server-rpm-all

server-docker: server-packages
	@echo "==> [Server] build-server-docker"
	@[ -x "$(PATH_TO_SCRIPTS)/build-server-docker" ] || \
	  (echo "ERRO: 'build-server-docker' não encontrado."; exit 1)
	@ROOT_DIR=$(ROOT_DIR) DOCKER_SERVER_TAG=$(DOCKER_SERVER_TAG) \
	  RPMBUILD_DOCKER_IMAGE=$(IMAGE_REGISTRY)/$(BASE_DOCKER_TAG) \
	  RPMBUILD_DIST="$(DIST)" DOCKERFILE=Dockerfile.$(DIST) \
	  $(PATH_TO_SCRIPTS)/build-server-docker
	@echo "[Server] Tagging e push da imagem 'latest'"
	docker tag $(DOCKER_SERVER_TAG) $(IMAGE_REGISTRY)/pmm-server:latest
	docker push $(IMAGE_REGISTRY)/pmm-server:latest

server: server-packages server-docker
	@echo "==> [Server] Build completo do servidor finalizado."

# -----------------------------------------------------------------------------
# 4) Watchtower (opcional)
# -----------------------------------------------------------------------------
.PHONY: watchtower
watchtower:
	@echo "==> [Watchtower] build-watchtower (opcional)"
	@[ -x "$(PATH_TO_SCRIPTS)/build-watchtower" ] && \
	  ROOT_DIR=$(ROOT_DIR) $(PATH_TO_SCRIPTS)/build-watchtower || \
	  echo "Aviso: 'build-watchtower' não encontrado."

# -----------------------------------------------------------------------------
# 5) Devcontainer (opcional)
# -----------------------------------------------------------------------------
.PHONY: devcontainer
devcontainer:
	@echo "==> [Devcontainer] Trigger build (condicional: $(GIT_BRANCH), $(DESTINATION))"
	@if [ "$(GIT_BRANCH)" = "v3" ] && [ "$(DESTINATION)" = "experimental" ]; then \
	    curl -L -X POST -H "Accept: application/vnd.github+json" -d '{"ref":"v3"}' \
	      "https://api.github.com/repos/percona/pmm/actions/workflows/devcontainer.yml/dispatches"; \
	else \
	    echo "Condição não satisfeita. Devcontainer não acionado."; \
	fi

# -----------------------------------------------------------------------------
# 6) Testes (API, E2E)
# -----------------------------------------------------------------------------
.PHONY: test-api test-e2e
test-api:
	@echo "==> [Testes] Executando testes de API (placeholder)..."
	@[ -x "$(PATH_TO_SCRIPTS)/run-api-tests" ] && \
	  ROOT_DIR=$(ROOT_DIR) $(PATH_TO_SCRIPTS)/run-api-tests || \
	  echo "Aviso: 'run-api-tests' não encontrado."

test-e2e:
	@echo "==> [Testes] Placeholder para testes E2E."
	@echo "Adicione seu script de testes E2E se necessário."

# -----------------------------------------------------------------------------
# 8) Alvo Final de Build Completo
# -----------------------------------------------------------------------------
.PHONY: all
all: prepare build-rpmbuild-image client server watchtower devcontainer test-api test-e2e rpm-build
	@echo "==> [ALL] Processo COMPLETO de build do PMM finalizado."

# -----------------------------------------------------------------------------
# 9) Release: Push final das Imagens Docker
# -----------------------------------------------------------------------------
.PHONY: build-datacosmos
build-datacosmos:
	@echo "==> [RELEASE] Publicando as imagens Docker do PMM..."
	@echo "Push do client:     $(CLIENT_IMAGE)"
	docker push $(CLIENT_IMAGE) || echo "Aviso: falha no push do client"
	@echo "Push do server:     $(SERVER_IMAGE)"
	docker push $(SERVER_IMAGE) || echo "Aviso: falha no push do server"
	@echo "Push do watchtower: $(WATCHTOWER_IMAGE)"
	docker push $(WATCHTOWER_IMAGE) || echo "Aviso: falha no push do watchtower"
	@echo "==> [RELEASE] Processo de release finalizado."

###############################################################################
# Fim do Makefile
###############################################################################
